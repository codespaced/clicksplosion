{"version":3,"sources":["app/components/label/label.ts","app/enemy/enemy.ts","app/initialize.ts","app/scenes/game.ts","app/scenes/loading.ts","app/scenes/reticle.ts"],"names":[],"mappingshFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArzbvCA;AAAA","file":"public/app.js","sourcesContent":["\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Label = /** @class */ (function (_super) {\r\n    __extends(Label, _super);\r\n    function Label(scene, x, y, font, text, size, align) {\r\n        var _this = _super.call(this, scene, x, y, font, text, size, align) || this;\r\n        _this.value = 0;\r\n        _this.buffer = 0;\r\n        _this.step = 1;\r\n        _this.throttle = false;\r\n        _this.countUp = true;\r\n        _this.prefix = '';\r\n        return _this;\r\n    }\r\n    Label.prototype.setLabel = function (n) {\r\n        var adjustment = n - this.value;\r\n        this.buffer = this.countUp ? adjustment : -adjustment;\r\n        return this.update();\r\n    };\r\n    Label.prototype.increase = function (n) {\r\n        this.buffer += n;\r\n    };\r\n    Label.prototype.update = function () {\r\n        this.setStep(this.buffer);\r\n        this.consumeBuffer();\r\n        this.text = this.value.toString();\r\n        return this.countUp ? this.value + this.buffer : this.value - this.buffer;\r\n    };\r\n    Label.prototype.setStep = function (buffer) {\r\n        this.step = this.throttle ? this.rateOfChange(buffer) : 1;\r\n    };\r\n    // what would you call it?\r\n    Label.prototype.consumeBuffer = function () {\r\n        // step will be 0 if buffer is zero\r\n        var step = Math.min(this.buffer, this.step);\r\n        this.buffer -= step;\r\n        if (this.countUp) {\r\n            this.value += step;\r\n        }\r\n        else {\r\n            this.value -= step;\r\n        }\r\n    };\r\n    // this is ugly, I'm sure there's a better way\r\n    // int('999999999999' take log10(n) digits?)\r\n    Label.prototype.rateOfChange = function (n) {\r\n        if (n > 1000000) {\r\n            return 999999;\r\n        }\r\n        else if (n > 100000) {\r\n            return 99999;\r\n        }\r\n        else if (n > 10000) {\r\n            return 9999;\r\n        }\r\n        else if (n > 1000) {\r\n            return 999;\r\n        }\r\n        else if (n > 100) {\r\n            return 99;\r\n        }\r\n        else if (n > 10) {\r\n            return 9;\r\n        }\r\n        return 1;\r\n    };\r\n    return Label;\r\n}(Phaser.GameObjects.BitmapText));\r\nexports.default = Label;\r\n//# sourceMappingURL=label.js.map\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar enemy = /** @class */ (function () {\r\n    function enemy() {\r\n    }\r\n    return enemy;\r\n}());\r\nexports.default = enemy;\r\n//# sourceMappingURL=enemy.js.map\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar game_1 = require(\"./scenes/game\");\r\nvar game = new Phaser.Game({\r\n    type: Phaser.AUTO,\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n        width: 800,\r\n        height: 600\r\n    },\r\n    physics: {\r\n        default: 'arcade',\r\n        arcade: {\r\n            gravity: { y: 0 },\r\n            debug: false\r\n        }\r\n    },\r\n    scene: [game_1.default],\r\n});\r\n//# sourceMappingURL=initialize.js.map\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar label_1 = require(\"../components/label/label\");\r\nvar GameScene = /** @class */ (function (_super) {\r\n    __extends(GameScene, _super);\r\n    function GameScene() {\r\n        var _this = _super.call(this, { key: \"gameScene\", active: true }) || this;\r\n        _this.enemyCount = 0;\r\n        _this.level = 1;\r\n        _this.font = \"consolasBold\";\r\n        _this.levelNumberFont = 'clarendon';\r\n        _this.enabled = false;\r\n        /*\r\n         * magic numbers\r\n         * Warning, poor programming practices ahead.\r\n         */\r\n        // Velocity\r\n        _this.magic_initial_velocity_multiplier = 70;\r\n        _this.magic_per_level_velocity_multiplier = 15;\r\n        _this.magic_maximum_velocity_multiplier = 500;\r\n        // Enemies\r\n        _this.magic_initial_number_of_enemies = 5;\r\n        _this.magic_per_level_number_of_enemies = 3;\r\n        _this.magic_maximum_number_of_enemies = 100;\r\n        // Enemy Delay\r\n        _this.magic_initial_enemy_delay = 250;\r\n        _this.magic_per_level_enemy_delay = -5;\r\n        _this.magic_minimum_enemy_delay = 25;\r\n        // Level Delay\r\n        _this.magic_level_delay = 2000;\r\n        // Reticle\r\n        _this.magic_initial_reticle_radius = 10;\r\n        _this.magic_per_level_reticle_radius = 2;\r\n        // Hit Points\r\n        _this.magic_initial_hit_points = 1;\r\n        _this.magic_per_level_hit_points = 2;\r\n        // Experience\r\n        _this.magic_experience_per_enemy_multiplier = 10;\r\n        _this.velocity_multiplier = _this.magic_initial_velocity_multiplier;\r\n        _this.number_of_enemies = _this.magic_initial_number_of_enemies;\r\n        _this.reticle_radius = _this.magic_initial_reticle_radius;\r\n        _this.hit_points = _this.magic_initial_hit_points;\r\n        _this.enemy_delay = _this.magic_initial_enemy_delay;\r\n        return _this;\r\n    }\r\n    GameScene.prototype.preload = function () {\r\n        this.width = this.cameras.main.width;\r\n        this.height = this.cameras.main.height;\r\n        this.centerX = this.cameras.main.width / 2;\r\n        this.centerY = this.cameras.main.height / 2;\r\n        var progressBar = this.add.graphics();\r\n        var progressBox = this.add.graphics();\r\n        progressBox.fillStyle(0x222222, 0.8);\r\n        progressBox.fillRect(240, 270, 320, 50);\r\n        var loadingText = this.make.text({\r\n            x: this.centerX, y: this.centerY - 50, text: \"Loading...\", style: {\r\n                font: \"20px monospace\", fill: \"#ffffff\"\r\n            }\r\n        });\r\n        loadingText.setOrigin(0.5, 0.5);\r\n        var percentText = this.make.text({\r\n            x: this.centerX, y: this.centerY - 5, text: \"0%\", style: {\r\n                font: \"18px monospace\", fill: \"#ffffff\"\r\n            }\r\n        });\r\n        percentText.setOrigin(0.5, 0.5);\r\n        var assetText = this.make.text({\r\n            x: this.centerX, y: this.centerY + 50, text: \"\", style: {\r\n                font: \"18px monospace\", fill: \"#ffffff\"\r\n            }\r\n        });\r\n        assetText.setOrigin(0.5, 0.5);\r\n        this.load.on(\"progress\", function (value) {\r\n            percentText.setText(value * 100 + \"%\");\r\n            progressBar.clear();\r\n            progressBar.fillStyle(0xffffff, 1);\r\n            progressBar.fillRect(250, 280, 300 * value, 30);\r\n        });\r\n        this.load.on(\"fileprogress\", function (file) {\r\n            assetText.setText(\"Loading asset: \" + file.key);\r\n        });\r\n        this.load.on(\"complete\", function () {\r\n            progressBar.destroy();\r\n            progressBox.destroy();\r\n            loadingText.destroy();\r\n            percentText.destroy();\r\n            assetText.destroy();\r\n        });\r\n        // this.load.spritesheet(\"mage\", \"assets/mage.png\", {\r\n        //   frameWidth: 60, frameHeight: 60\r\n        // });\r\n        this.load.spritesheet(\"mage\", \"assets/cast.png\", {\r\n            frameWidth: 64, frameHeight: 68, endFrame: 3\r\n        });\r\n        this.load.spritesheet(\"enemy\", \"assets/floating_thing.png\", {\r\n            frameWidth: 45, frameHeight: 72\r\n        });\r\n        this.load.atlas(\"explosion\", \"assets/particles/explosion.png\", \"assets/particles/explosion.json\");\r\n        this.load.bitmapFont(\"clarendon\", \"assets/fonts/bitmap/clarendon.png\", \"assets/fonts/bitmap/clarendon.xml\");\r\n        this.load.bitmapFont(\"consolasBold\", \"assets/fonts/consolasBold_0.png\", \"assets/fonts/consolasBold.fnt\");\r\n    };\r\n    // init(data) {\r\n    //   console.debug(\"init\", data, this);\r\n    // }\r\n    GameScene.prototype.create = function () {\r\n        /* Create world bounds */\r\n        this.physics.world.setBounds(0, 0, 1600, 800);\r\n        /* enemies */\r\n        // TODO: Pooling\r\n        this.enemies = this.physics.add.group();\r\n        this.animations = this.add.group();\r\n        // const background = this.add.image(800, 600, 'background')\r\n        /* player */\r\n        this.player = this.physics.add.sprite(400, 300, \"mage\");\r\n        this.player\r\n            .setOrigin(0.5, 0.5)\r\n            .setDisplaySize(60, 60)\r\n            .setCollideWorldBounds(true)\r\n            .setImmovable();\r\n        this.createReticle();\r\n        this.healthLabel = this.createLabel(this.healthLabel, 50, 10, this.font, 0, 0.5, false, false).setDepth(1);\r\n        this.scoreLabel = this.createLabel(this.scoreLabel, 790, 10, this.font, 1, 0.5, true, true).setDepth(1);\r\n        this.levelLabel = this.createLabel(this.levelLabel, 360, 10, this.font, 0.5, 0.5, false, true).setDepth(1);\r\n        this.levelNumber = this.add.bitmapText(this.centerX, this.centerY, this.levelNumberFont, '1')\r\n            .setOrigin(0.5, 0.5)\r\n            .setDepth(1);\r\n        this.waitForClick('Click to Begin');\r\n        // time delay for enemies\r\n        this.time.addEvent({\r\n            delay: this.enemy_delay, loop: true, callback: this.addEnemy, callbackScope: this\r\n        });\r\n        // triggers the onCollision handler\r\n        this.physics.add.collider(this.player, this.enemies, this.onCollision, null, this);\r\n        this.createExplosion();\r\n        var config = {\r\n            key: 'castAnimation',\r\n            frames: this.anims.generateFrameNumbers('mage', { start: 0, end: 3 }),\r\n            frameRate: 20,\r\n            repeat: 0\r\n        };\r\n        this.anims.create(config);\r\n        this.input.on(\"pointerdown\", function (pointer) {\r\n            this.explosion.emitParticleAt(pointer.x, pointer.y);\r\n            this.reticle.x = pointer.x;\r\n            this.reticle.y = pointer.y;\r\n            this.reticleCollider.active = true;\r\n            this.createFadeAnimation(this.reticle);\r\n            this.player.play('castAnimation');\r\n        }, this);\r\n    };\r\n    GameScene.prototype.createExplosion = function () {\r\n        this.explosion = this.add.particles(\"explosion\");\r\n        // this.explosion.createEmitter({\r\n        //   frame: [\"smoke-puff\", \"cloud\", \"smoke-puff\"],\r\n        //   angle: { min: 240, max: 300 },\r\n        //   speed: { min: 200, max: 300 },\r\n        //   quantity: 6,\r\n        //   lifespan: 2000,\r\n        //   alpha: { start: 1, end: 0 },\r\n        //   //scale: { start: 1.5, end: 0.5 },\r\n        //   scale: { start: 0.5, end: 0.1 },\r\n        //   on: false\r\n        // });\r\n        // this.explosion.createEmitter({\r\n        //   frame: \"red\",\r\n        //   angle: { min: 0, max: 360, steps: 32 },\r\n        //   lifespan: 1000,\r\n        //   speed: 400,\r\n        //   quantity: 32,\r\n        //   scale: { start: 0.3, end: 0 },\r\n        //   on: false\r\n        // });\r\n        // this.explosion.createEmitter({\r\n        //   frame: \"stone\",\r\n        //   angle: { min: 240, max: 300 },\r\n        //   speed: { min: 400, max: 600 },\r\n        //   quantity: { min: 2, max: 10 },\r\n        //   lifespan: 4000,\r\n        //   alpha: { start: 1, end: 0 },\r\n        //   scale: { min: 0.05, max: 0.4 },\r\n        //   rotate: { start: 0, end: 360, ease: \"Back.easeOut\" },\r\n        //   gravityY: 800,\r\n        //   on: false\r\n        // });\r\n        this.explosion.createEmitter({\r\n            frame: \"muzzleflash2\",\r\n            lifespan: 150,\r\n            scale: { start: 1, end: 0 },\r\n            rotate: { start: 0, end: 360 },\r\n            on: false,\r\n            blendMode: Phaser.BlendModes.ADD\r\n        });\r\n    };\r\n    GameScene.prototype.createLabel = function (label, x, y, font, originX, originY, throttle, countUp) {\r\n        label = new label_1.default(this, x, y, font)\r\n            .setOrigin(originX, originY)\r\n            .setVisible(true);\r\n        this.add.existing(label);\r\n        label.throttle = throttle;\r\n        label.countUp = countUp;\r\n        return label;\r\n    };\r\n    GameScene.prototype.createFloatAnimation = function (x, y, message, tint, parent) {\r\n        var animation = this.add.bitmapText(x, y, this.font, message).setTint(tint);\r\n        parent.add(animation);\r\n        var tween = this.add.tween({\r\n            targets: animation, duration: 750, ease: \"Exponential.In\", y: y - 50,\r\n            onComplete: function () {\r\n                animation.destroy();\r\n            }, callbackScope: this\r\n        });\r\n    };\r\n    GameScene.prototype.createFadeAnimation = function (gameObject) {\r\n        var _this = this;\r\n        var tween = this.add.tween({\r\n            targets: gameObject, duration: 100, ease: \"Linear\", alpha: { getStart: function () { return 0.5; }, getEnd: function () { return 0; } }, onComplete: function () {\r\n                _this.reticleCollider.active = false;\r\n            }, callbackScope: this\r\n        });\r\n    };\r\n    GameScene.prototype.createLevelAnimation = function () {\r\n        var _this = this;\r\n        var tween = this.add.tween({\r\n            targets: this.levelNumber,\r\n            scaleX: 1.5,\r\n            scaleY: 1.5,\r\n            duration: 500,\r\n            hold: 250,\r\n            yoyo: true,\r\n            repeat: 0,\r\n            ease: 'Quad.easeInOut',\r\n            onComplete: function () {\r\n                _this.enabled = true;\r\n                _this.levelNumber.visible = false;\r\n            },\r\n            callbackScope: this,\r\n            onYoyocallbackScope: this\r\n        });\r\n    };\r\n    GameScene.prototype.onCollision = function (gameObject, enemy) {\r\n        enemy.destroy();\r\n        var damage = Math.round(this.level / 2);\r\n        this.createFloatAnimation(enemy.x, enemy.y, \"-\" + damage, 0xff3333, this.animations);\r\n        this.healthLabel.increase(damage);\r\n        this.checkWinLose();\r\n    };\r\n    GameScene.prototype.onZwat = function (gameObject, enemy) {\r\n        var score = this.level * this.magic_experience_per_enemy_multiplier;\r\n        this.scoreLabel.increase(score);\r\n        this.createFloatAnimation(enemy.x, enemy.y, \"+\" + score, 0xffff00, this.animations);\r\n        enemy.destroy();\r\n        this.updateUi();\r\n        this.checkWinLose();\r\n    };\r\n    GameScene.prototype.checkWinLose = function () {\r\n        this.checkWin();\r\n        this.checkLose();\r\n    };\r\n    GameScene.prototype.isDead = function () {\r\n        return this.healthLabel.value <= 0;\r\n    };\r\n    GameScene.prototype.die = function () {\r\n        console.log(\"Alas, you have expired.\");\r\n        this.waitForClick();\r\n    };\r\n    GameScene.prototype.waitForClick = function (message) {\r\n        if (message === void 0) { message = 'GAME\\nOVER'; }\r\n        this.physics.pause();\r\n        var text = this.add.text(this.centerX, this.centerY, message, { fontFamily: 'Impact', color: '#ffffff', align: 'center', fontSize: '128px' });\r\n        text\r\n            .setDepth(1)\r\n            .setOrigin(0.5, 0.5)\r\n            .setVisible(true)\r\n            .setStroke('#de77ae', 8);\r\n        this.input.once(\"pointerdown\", function (pointer) {\r\n            text.destroy();\r\n            this.physics.resume();\r\n            this.newGame();\r\n        }, this);\r\n    };\r\n    GameScene.prototype.newGame = function () {\r\n        this.enemyCount = 0;\r\n        this.scoreLabel.value = 0;\r\n        this.updateUi();\r\n        this.animations.clear(true, true);\r\n        this.enemies.clear(true, true);\r\n        // reset game objects to reflect level 1\r\n        this.level = 1;\r\n        this.levelUp();\r\n    };\r\n    GameScene.prototype.checkWin = function () {\r\n        if (this.beatLevel()) {\r\n            this.level += 1;\r\n            this.enemyCount = 0;\r\n            this.levelUp();\r\n        }\r\n    };\r\n    GameScene.prototype.checkLose = function () {\r\n        if (this.isDead()) {\r\n            this.die();\r\n        }\r\n    };\r\n    GameScene.prototype.beatLevel = function () {\r\n        return this.enemies.children.size === 0;\r\n    };\r\n    GameScene.prototype.levelUp = function () {\r\n        //console.log(\"Congratulations on level \" + this.level);\r\n        this.enabled = false;\r\n        this.levelNumber.setText('' + this.level);\r\n        this.levelNumber.setVisible(true);\r\n        this.createLevelAnimation();\r\n        this.updateVelocity();\r\n        this.updateNumberOfEnemies();\r\n        this.updateHitPoints();\r\n        this.updateEnemyDelay();\r\n        this.updateReticle();\r\n        this.levelLabel.setLabel(this.level);\r\n    };\r\n    GameScene.prototype.updateReticle = function () {\r\n        var calculatedReticleRadius = this.magic_initial_reticle_radius +\r\n            this.magic_per_level_reticle_radius * this.level -\r\n            1;\r\n        this.reticle_radius = calculatedReticleRadius;\r\n        this.updateReticleTexture();\r\n    };\r\n    GameScene.prototype.updateEnemyDelay = function () {\r\n        var calculatedEnemyDelay = this.magic_initial_enemy_delay +\r\n            this.magic_per_level_enemy_delay * (this.level - 1);\r\n        this.enemy_delay = Math.max(this.magic_minimum_enemy_delay, calculatedEnemyDelay);\r\n    };\r\n    GameScene.prototype.updateHitPoints = function () {\r\n        this.hit_points =\r\n            this.magic_initial_hit_points + this.triangleNumber(this.level);\r\n        this.healthLabel.setLabel(this.hit_points);\r\n    };\r\n    GameScene.prototype.updateNumberOfEnemies = function () {\r\n        this.number_of_enemies =\r\n            this.magic_initial_number_of_enemies +\r\n                this.magic_per_level_number_of_enemies * (this.level - 1);\r\n    };\r\n    GameScene.prototype.updateVelocity = function () {\r\n        var calculatedVelocityMultiplier = this.magic_initial_velocity_multiplier +\r\n            this.magic_per_level_velocity_multiplier * (this.level - 1);\r\n        this.velocity_multiplier = Math.min(this.magic_maximum_velocity_multiplier, calculatedVelocityMultiplier);\r\n    };\r\n    // TODO: Pooling\r\n    // TODO: Move to enemy class\r\n    GameScene.prototype.addEnemy = function () {\r\n        if (!this.enabled ||\r\n            //this.enemies.children.size >= this.magic_maximum_number_of_enemies ||\r\n            this.enemyCount > this.number_of_enemies) {\r\n            return;\r\n        }\r\n        //let enemy = this.enemies.get(Phaser.Math.Between(-64, 864), Phaser.Math.Between(-64, 0))\r\n        var enemy = this.physics.add.sprite(Phaser.Math.Between(-64, 864), Phaser.Math.Between(-64, 0), \"enemy\");\r\n        //if (!enemy) return // None free\r\n        this.enemyCount += 1;\r\n        this.enemies.add(enemy);\r\n        this.activateEnemy(enemy);\r\n    };\r\n    // TODO: Move to enemy class\r\n    GameScene.prototype.activateEnemy = function (enemy) {\r\n        enemy\r\n            .setActive(true)\r\n            .setVisible(true)\r\n            .setScale(0.5);\r\n        var v = this.subtract(this.player.getCenter(), enemy.getCenter());\r\n        v.normalize();\r\n        enemy.setVelocityX(v.x * this.velocity_multiplier);\r\n        enemy.setVelocityY(v.y * this.velocity_multiplier);\r\n        enemy.setDebug(false, false, 0);\r\n    };\r\n    // top edge: -100, 900 -100, -50\r\n    // bottom edge: -100, 900 650, 700\r\n    // left: -100, 50 -100, 700\r\n    // right: 850, 900 -100, 700\r\n    GameScene.prototype.updateUi = function () {\r\n        this.scoreLabel.update();\r\n        this.healthLabel.update();\r\n        this.levelLabel.update();\r\n    };\r\n    // TODO: Move to utility class or find the actual function in phaser to do this\r\n    GameScene.prototype.subtract = function (a, b, out) {\r\n        if (typeof out === \"undefined\") {\r\n            out = new Phaser.Math.Vector2();\r\n        }\r\n        out.x = a.x - b.x;\r\n        out.y = a.y - b.y;\r\n        return out;\r\n    };\r\n    GameScene.prototype.update = function (time, delta) {\r\n        this.updateUi();\r\n        //this.reticleCollider.active = false;\r\n    };\r\n    // RETICLE\r\n    GameScene.prototype.createReticle = function () {\r\n        var texture = this.generateReticleTexture();\r\n        this.reticle = this.physics.add.image(-100, -100, texture);\r\n        this.reticle.setDebug(false, false, 0xffff00);\r\n        this.reticleCollider = this.physics.add.overlap(this.reticle, this.enemies, this.onZwat, null, this);\r\n    };\r\n    GameScene.prototype.generateReticleTexture = function () {\r\n        var r = this.reticle_radius;\r\n        var name = \"reticle\" + r;\r\n        var color = 0xffff00;\r\n        var thickness = 2;\r\n        var alpha = 1.0;\r\n        var graphics = this.make\r\n            .graphics({ x: 0, y: 0, add: false })\r\n            .lineStyle(thickness, color, alpha)\r\n            .strokeCircle(r, r, r)\r\n            .generateTexture(name, r * 2, r * 2);\r\n        graphics.destroy();\r\n        return name;\r\n    };\r\n    GameScene.prototype.updateReticleTexture = function () {\r\n        this.reticle.setCircle(this.reticle_radius);\r\n        var texture = this.generateReticleTexture();\r\n        this.reticle.setTexture(texture);\r\n    };\r\n    GameScene.prototype.triangleNumber = function (n) {\r\n        // equivalent to 1 + 2 + ... + n = n(n + 1)/2\r\n        // for n = 5 returns 15\r\n        // 5 + 4 + 3 + 2 + 1 = 15\r\n        // 5 * (5 + 1) / 2 = 15\r\n        return n * (n + 1) * 0.5;\r\n    };\r\n    return GameScene;\r\n}(Phaser.Scene));\r\nexports.default = GameScene;\r\n//# sourceMappingURL=game.js.map\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LoadingScene = /** @class */ (function (_super) {\r\n    __extends(LoadingScene, _super);\r\n    function LoadingScene() {\r\n        var _this = _super.call(this, { key: 'loadingscene', active: true }) || this;\r\n        _this.progressBar = null;\r\n        return _this;\r\n    }\r\n    LoadingScene.prototype.init = function (data) {\r\n        console.debug('init', data, this);\r\n    };\r\n    LoadingScene.prototype.preload = function () {\r\n        // this.load.image('sky', 'space3.png');\r\n        // this.load.image('logo', 'phaser3-logo.png');\r\n        this.progressBar = this.add.graphics();\r\n        this.load.on('progress', this.onLoadProgress, this);\r\n        this.load.on('complete', this.onLoadComplete, this);\r\n        this.load.spritesheet(\"mage\", \"assets/mage.png\", {\r\n            frameWidth: 60,\r\n            frameHeight: 60\r\n        });\r\n        this.load.spritesheet(\"enemy\", \"assets/floating_thing.png\", {\r\n            frameWidth: 45,\r\n            frameHeight: 72\r\n        });\r\n        this.load.atlas(\"explosion\", \"assets/particles/explosion.png\", \"assets/particles/explosion.json\");\r\n        this.load.bitmapFont(\"clarendon\", \"assets/fonts/bitmap/clarendon.png\", \"assets/fonts/bitmap/clarendon.xml\");\r\n        this.load.bitmapFont(\"consolasBold\", \"assets/fonts/consolasBold_0.png\", \"assets/fonts/consolasBold.fnt\");\r\n    };\r\n    // create () {\r\n    //   const sky = this.add.image(400, 300, 'sky');\r\n    //   sky.alpha = 0.5;\r\n    // }\r\n    LoadingScene.prototype.onLoadComplete = function (loader, totalComplete, totalFailed) {\r\n        console.debug('complete', totalComplete);\r\n        console.debug('failed', totalFailed);\r\n        this.progressBar.destroy();\r\n        this.scene.start('GameScene');\r\n    };\r\n    LoadingScene.prototype.onLoadProgress = function (progress) {\r\n        console.debug('progress', progress);\r\n        this.progressBar\r\n            .clear()\r\n            .fillStyle(0xaaffaa, 0.75)\r\n            .fillRect(0, 0, 800 * progress, 50);\r\n    };\r\n    return LoadingScene;\r\n}(Phaser.Scene));\r\nexports.default = LoadingScene;\r\n;\r\n//# sourceMappingURL=loading.js.map\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ReticleScene = /** @class */ (function (_super) {\r\n    __extends(ReticleScene, _super);\r\n    function ReticleScene() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ReticleScene.prototype.preload = function () {\r\n        this.load.spritesheet('reticle', 'assets/floating_thing.png', { frameWidth: 45, frameHeight: 72 });\r\n    };\r\n    ReticleScene.prototype.create = function () {\r\n        this.physics.world.setBounds(0, 0, 1600, 1200);\r\n        // let graphics = this.make.graphics({x:0, y:0, add: true});\r\n        // graphics.lineStyle(2, 0xffff00, 1.0);\r\n        // graphics.strokeCircle(24, 24, 24);\r\n        // graphics.generateTexture('reticle', 48, 48);\r\n        // graphics.destroy();\r\n        this.reticle = this.physics.add.sprite(300, 400, 'reticle');\r\n        this.reticle.setVisible(true);\r\n        console.log(this.reticle.texture);\r\n        this.input.on('pointermove', function (pointer) {\r\n            this.reticle.x = pointer.x;\r\n            this.reticle.y = pointer.y;\r\n        }, this);\r\n    };\r\n    return ReticleScene;\r\n}(Phaser.Scene));\r\nexports.default = ReticleScene;\r\n//# sourceMappingURL=reticle.js.map\n"]}